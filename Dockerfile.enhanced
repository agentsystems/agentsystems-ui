# -----------------------------------------------------------------------------
# AgentSystems UI Image  
# Builds the React TypeScript UI with comprehensive license attribution
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Builder stage – install Node.js deps, build app, and collect licenses
# -----------------------------------------------------------------------------
FROM node:20-alpine AS builder

ENV NODE_ENV=production
WORKDIR /app

# Install license scanning tools
RUN npm install -g license-checker npm-check-licenses

# Copy package files first for better caching
COPY package*.json ./

# Install dependencies (production + dev for build)
RUN npm ci --include=dev

# Copy source code
COPY . .

# Build the application
RUN npm run build

# ---- License collection (Node.js + Alpine) ----
# 1) Create license directories
RUN mkdir -p /app/licenses/nodejs /app/licenses/alpine

# 2) Generate comprehensive Node.js license report
RUN license-checker \
      --production \
      --json \
      --out /app/licenses/nodejs/THIRD_PARTY_LICENSES.json

# 3) Copy license generation script and run it
COPY scripts/generate-licenses.js /tmp/generate-licenses.js
RUN node /tmp/generate-licenses.js && rm /tmp/generate-licenses.js

# 4) Export exact dependency tree for reproducibility
RUN npm list --production --json > /app/licenses/nodejs/DEPENDENCY_TREE.json
RUN npm list --production > /app/licenses/nodejs/DEPENDENCY_TREE.txt

# 5) Copy Node.js NOTICE files (if any exist in node_modules)
RUN find node_modules -name "NOTICE*" -type f 2>/dev/null | \
    while read file; do \
      pkg_name=$(echo $file | cut -d'/' -f2); \
      cp "$file" "/app/licenses/nodejs/${pkg_name}-NOTICE" 2>/dev/null || true; \
    done

# 6) Collect Alpine package licensing info
RUN apk info -a > /app/licenses/alpine/INSTALLED_PACKAGES.txt && \
    mkdir -p /app/licenses/alpine/copyrights && \
    for pkg in $(apk info | tr '\n' ' '); do \
      if [ -f "/usr/share/licenses/$pkg/COPYING" ]; then \
        cp "/usr/share/licenses/$pkg/COPYING" "/app/licenses/alpine/copyrights/${pkg}-COPYING" 2>/dev/null || true; \
      fi; \
      if [ -f "/usr/share/licenses/$pkg/LICENSE" ]; then \
        cp "/usr/share/licenses/$pkg/LICENSE" "/app/licenses/alpine/copyrights/${pkg}-LICENSE" 2>/dev/null || true; \
      fi; \
    done

# 7) Generate Alpine package summary
RUN echo "# Alpine Linux Packages\n" > /app/licenses/alpine/ATTRIBUTIONS.md && \
    echo "Base image: node:20-alpine\n" >> /app/licenses/alpine/ATTRIBUTIONS.md && \
    echo "## Installed Packages\n" >> /app/licenses/alpine/ATTRIBUTIONS.md && \
    apk info | sort | while read pkg; do \
      version=$(apk info $pkg | grep $pkg | head -1 | sed 's/.*-\([^-]*-r[0-9]*\)/\1/'); \
      echo "- $pkg: $version" >> /app/licenses/alpine/ATTRIBUTIONS.md; \
    done

# 8) Clean up license scanning tools from final build
RUN npm uninstall -g license-checker npm-check-licenses

# -----------------------------------------------------------------------------
# Runtime stage – minimal nginx image with app and licenses
# -----------------------------------------------------------------------------
FROM nginx:1.25-alpine

WORKDIR /app

# Copy built application from builder
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx configuration  
COPY docker/nginx.conf /etc/nginx/conf.d/default.conf

# Copy entrypoint script for runtime configuration
COPY docker/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Copy project LICENSE file
COPY LICENSE /app/LICENSE

# Copy comprehensive license/attribution artifacts
COPY --from=builder /app/licenses /app/licenses

# Generate runtime license summary
RUN echo "# AgentSystems UI - License Summary\n" > /app/licenses/README.md && \
    echo "This container includes the following license information:\n" >> /app/licenses/README.md && \
    echo "## Application License" >> /app/licenses/README.md && \
    echo "- Main application: See /app/LICENSE\n" >> /app/licenses/README.md && \
    echo "## Third-Party Dependencies" >> /app/licenses/README.md && \
    echo "- Node.js packages: /app/licenses/nodejs/" >> /app/licenses/README.md && \
    echo "- Alpine packages: /app/licenses/alpine/\n" >> /app/licenses/README.md && \
    echo "## Quick Access" >> /app/licenses/README.md && \
    echo "- Node.js attributions: /app/licenses/nodejs/ATTRIBUTIONS.md" >> /app/licenses/README.md && \
    echo "- Alpine attributions: /app/licenses/alpine/ATTRIBUTIONS.md" >> /app/licenses/README.md

# Health check endpoint is already configured in nginx.conf

# OCI labels with license information
LABEL org.opencontainers.image.title="AgentSystems UI" \
      org.opencontainers.image.description="Production-ready web interface for AgentSystems platform" \
      org.opencontainers.image.vendor="AgentSystems" \
      org.opencontainers.image.licenses="Apache-2.0" \
      org.opencontainers.image.license.files="/app/licenses" \
      org.opencontainers.image.source="https://github.com/agentsystems/agentsystems-ui" \
      org.opencontainers.image.documentation="https://github.com/agentsystems/agentsystems-ui/blob/main/README.md"

# Create non-root user (nginx runs as nginx user by default)
# This is mainly for consistency with other containers
RUN addgroup -g 1001 appuser && \
    adduser -D -s /bin/sh -u 1001 -G appuser appuser

EXPOSE 80

# Health check for container orchestration
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost/health || exit 1

# Use entrypoint for runtime config injection
ENTRYPOINT ["/entrypoint.sh"]
CMD ["nginx", "-g", "daemon off;"]